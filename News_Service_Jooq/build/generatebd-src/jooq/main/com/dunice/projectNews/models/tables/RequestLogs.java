/*
 * This file is generated by jOOQ.
 */
package com.dunice.projectNews.models.tables;


import com.dunice.projectNews.models.Keys;
import com.dunice.projectNews.models.NewsSchema;
import com.dunice.projectNews.models.tables.records.RequestLogsRecord;

import java.time.LocalDateTime;
import java.util.Collection;
import java.util.function.Function;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Function6;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Records;
import org.jooq.Row6;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.SelectField;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RequestLogs extends TableImpl<RequestLogsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>news_schema.request_logs</code>
     */
    public static final RequestLogs REQUEST_LOGS = new RequestLogs();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RequestLogsRecord> getRecordType() {
        return RequestLogsRecord.class;
    }

    /**
     * The column <code>news_schema.request_logs.timestamp</code>.
     */
    public final TableField<RequestLogsRecord, LocalDateTime> TIMESTAMP = createField(DSL.name("timestamp"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>news_schema.request_logs.method</code>.
     */
    public final TableField<RequestLogsRecord, String> METHOD = createField(DSL.name("method"), SQLDataType.VARCHAR(10).nullable(false), this, "");

    /**
     * The column <code>news_schema.request_logs.url</code>.
     */
    public final TableField<RequestLogsRecord, String> URL = createField(DSL.name("url"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>news_schema.request_logs.status</code>.
     */
    public final TableField<RequestLogsRecord, Integer> STATUS = createField(DSL.name("status"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>news_schema.request_logs.errors</code>.
     */
    public final TableField<RequestLogsRecord, String> ERRORS = createField(DSL.name("errors"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>news_schema.request_logs.users_email</code>.
     */
    public final TableField<RequestLogsRecord, String> USERS_EMAIL = createField(DSL.name("users_email"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    private RequestLogs(Name alias, Table<RequestLogsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private RequestLogs(Name alias, Table<RequestLogsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>news_schema.request_logs</code> table reference
     */
    public RequestLogs(String alias) {
        this(DSL.name(alias), REQUEST_LOGS);
    }

    /**
     * Create an aliased <code>news_schema.request_logs</code> table reference
     */
    public RequestLogs(Name alias) {
        this(alias, REQUEST_LOGS);
    }

    /**
     * Create a <code>news_schema.request_logs</code> table reference
     */
    public RequestLogs() {
        this(DSL.name("request_logs"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : NewsSchema.NEWS_SCHEMA;
    }

    @Override
    public UniqueKey<RequestLogsRecord> getPrimaryKey() {
        return Keys.REQUEST_LOGS_PKEY;
    }

    @Override
    public RequestLogs as(String alias) {
        return new RequestLogs(DSL.name(alias), this);
    }

    @Override
    public RequestLogs as(Name alias) {
        return new RequestLogs(alias, this);
    }

    @Override
    public RequestLogs as(Table<?> alias) {
        return new RequestLogs(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public RequestLogs rename(String name) {
        return new RequestLogs(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public RequestLogs rename(Name name) {
        return new RequestLogs(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public RequestLogs rename(Table<?> name) {
        return new RequestLogs(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public RequestLogs where(Condition condition) {
        return new RequestLogs(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public RequestLogs where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public RequestLogs where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public RequestLogs where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public RequestLogs where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public RequestLogs where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public RequestLogs where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public RequestLogs where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public RequestLogs whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public RequestLogs whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<LocalDateTime, String, String, Integer, String, String> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function6<? super LocalDateTime, ? super String, ? super String, ? super Integer, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function6<? super LocalDateTime, ? super String, ? super String, ? super Integer, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
